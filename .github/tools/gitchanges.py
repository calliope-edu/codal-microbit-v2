#!/usr/bin/env python3

# The MIT License (MIT)

# Copyright (c) 2017 Lancaster University.

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import os
import json
import re
from natsort import natsorted
from optparse import OptionParser

outBuffer = []
def output( data, forcePrint = False ):
    outBuffer.append( data )

    if forcePrint:
        print( data )

def writeOutput():
    if options.outFile != None:
        with open( options.outFile, mode="w", encoding="utf-8" ) as out:
            for line in outBuffer:
                out.write( f"{line}\n" )
    else:
        for line in outBuffer:
            print( line )

def getTags():
    tags = os.popen('git -P tag').read().strip().splitlines()
    tags = filter(lambda x: "-" not in x, tags)
    return natsorted(tags,reverse=True)

def getCommitsBetween( tagA, tagB = "HEAD" ):
    commits = os.popen(f"git -P shortlog {tagA}..{tagB}").read().strip().splitlines()
    return "\n".join(map( lambda x: x.replace("      ", " - "), commits ))

def getRepoURL():
    origin = os.popen("git remote get-url origin").read().strip().split( "github.com/", maxsplit=1 )
    return f"https://github.com/{origin[1]}/"

def printLibraryLinks():
    config = json.loads(open( 'target-locked.json' ).read())
    for lib in config['libraries']:
        output( F" - {lib['name']} = {lib['url']}/tree/{lib['branch']}" )

tags = getTags()

defaultTag = "v0.0.1"
if( len(tags) > 0 ):
    defaultTag = tags[0]

parser = OptionParser()
parser.add_option( "--input", dest="inFile", help="read existing changelog from FILE", metavar="FILE" )
parser.add_option( "--output", dest="outFile", help="write updated changelog to FILE", metavar="FILE" )
parser.add_option( "--tag", dest="tag", help="Force this to be the tag to update to", default=defaultTag )

(options, args) = parser.parse_args()

if options.tag not in tags:
    print( f"No such tag '{options.tag}' found, unable to continue." )
    exit( 1 )

if options.outFile == None:
    options.outFile = options.inFile

output( '# Changelog' )
output( '*The head of this file is autogenerated and will be overwritten on the next tag.*' )
output( '' )
output( 'For official release notes, please see Releases.md' )
output( '' )
output( 'The current tag uses the following library versions:' )
printLibraryLinks()
output( '' )

if options.inFile != None:
    with open( options.inFile, mode="r", encoding="utf-8" ) as input:
        lastTag = None

        url = getRepoURL()

        try:
            for line in input.readlines():
                line = line.replace( "\n", "" )
                if lastTag == None:
                    if line.startswith( "##" ):
                        matches = re.search( "\[(v.+)\]", line )
                        lastTag = matches.group(1)

                        if lastTag == options.tag:
                            print( "Nothing to do, Stop." )
                            exit( 0 )

                        logURL = f"{url}compare/{lastTag}...{options.tag}"
                    
                        output( f"## [{options.tag}]({logURL})", forcePrint=True )
                        output( '', forcePrint=True )
                        output( getCommitsBetween( lastTag, options.tag ), forcePrint=True )
                        output( '', forcePrint=True )
                        output( line )
                else:
                    output( line )
        except:
            exit( 1 )
    
    writeOutput()
    exit( 0 )

for i in range(0, len(tags)-1):
    output( tags[i] )
    url = getRepoURL()
    logURL = f"{url}compare/{tags[i+1]}...{tags[i]}"
    treeURL = f"{url}tree/{tags[i]}"

    output('')
    output(f"## [{tags[i]}]({logURL})" )
    output('')
    output( getCommitsBetween( tags[i+1], tags[i] ) )

writeOutput()